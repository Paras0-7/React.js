[{"D:\\Courses\\React.js\\Form Component\\src\\index.js":"1","D:\\Courses\\React.js\\Form Component\\src\\App.js":"2","D:\\Courses\\React.js\\Form Component\\src\\components\\SimpleInput.js":"3","D:\\Courses\\React.js\\Form Component\\src\\components\\BasicForm.js":"4","D:\\Courses\\React.js\\Form Component\\src\\hooks\\use-imput.js":"5"},{"size":179,"mtime":1654413437133,"results":"6","hashOfConfig":"7"},{"size":162,"mtime":1654499126892,"results":"8","hashOfConfig":"7"},{"size":1386,"mtime":1654438867068,"results":"9","hashOfConfig":"7"},{"size":2754,"mtime":1654499613136,"results":"10","hashOfConfig":"7"},{"size":549,"mtime":1654499113764,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"18xvd04",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"D:\\Courses\\React.js\\Form Component\\src\\index.js",[],["24","25"],"D:\\Courses\\React.js\\Form Component\\src\\App.js",[],"D:\\Courses\\React.js\\Form Component\\src\\components\\SimpleInput.js",["26"],"import { useState, useRef } from \"react\";\nconst SimpleInput = (props) => {\n  const nameRef = useRef();\n  const [name, setName] = useState(\"\");\n  const [isValid, setIsValid] = useState(false);\n  const [touched, setIsTouched] = useState(false);\n\n  const nameIsInvalid = !isValid && touched;\n  const classes = nameIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const nameInputHandler = function (e) {\n    setName(e.target.value);\n  };\n\n  const formSubmitHandler = function (e) {\n    e.preventDefault();\n    setIsTouched(true);\n\n    if (nameRef.current.value.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n\n    setIsValid(true);\n    console.log(nameRef.current.value);\n  };\n\n  const nameInputBlurHandler = function (e) {\n    setIsTouched(true);\n    if (nameRef.current.value.trim() === \"\") {\n      setIsValid(false);\n      return;\n    }\n  };\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={classes}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameRef}\n          onChange={nameInputHandler}\n          type=\"text\"\n          id=\"name\"\n          onBlur={nameInputBlurHandler}\n        />\n        {nameIsInvalid && <p className=\"error-text\">Name Must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","D:\\Courses\\React.js\\Form Component\\src\\components\\BasicForm.js",[],"D:\\Courses\\React.js\\Form Component\\src\\hooks\\use-imput.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":4,"column":10,"nodeType":"33","messageId":"34","endLine":4,"endColumn":14},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'name' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]